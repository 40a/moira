// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira-alert (interfaces: Database)

package mock_moira_alert

import (
	gomock "github.com/golang/mock/gomock"
	moira_alert "github.com/moira-alert/moira-alert"
	time "time"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return _m.recorder
}

// AddNotification mocks base method
func (_m *MockDatabase) AddNotification(_param0 *moira_alert.ScheduledNotification) error {
	ret := _m.ctrl.Call(_m, "AddNotification", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification
func (_mr *MockDatabaseMockRecorder) AddNotification(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNotification", arg0)
}

// FetchEvent mocks base method
func (_m *MockDatabase) FetchEvent() (*moira_alert.EventData, error) {
	ret := _m.ctrl.Call(_m, "FetchEvent")
	ret0, _ := ret[0].(*moira_alert.EventData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEvent indicates an expected call of FetchEvent
func (_mr *MockDatabaseMockRecorder) FetchEvent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchEvent")
}

// GetChecksCount mocks base method
func (_m *MockDatabase) GetChecksCount() (int64, error) {
	ret := _m.ctrl.Call(_m, "GetChecksCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksCount indicates an expected call of GetChecksCount
func (_mr *MockDatabaseMockRecorder) GetChecksCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetChecksCount")
}

// GetContact mocks base method
func (_m *MockDatabase) GetContact(_param0 string) (moira_alert.ContactData, error) {
	ret := _m.ctrl.Call(_m, "GetContact", _param0)
	ret0, _ := ret[0].(moira_alert.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact
func (_mr *MockDatabaseMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContact", arg0)
}

// GetContacts mocks base method
func (_m *MockDatabase) GetContacts() ([]moira_alert.ContactData, error) {
	ret := _m.ctrl.Call(_m, "GetContacts")
	ret0, _ := ret[0].([]moira_alert.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts
func (_mr *MockDatabaseMockRecorder) GetContacts() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContacts")
}

// GetMetricsCount mocks base method
func (_m *MockDatabase) GetMetricsCount() (int64, error) {
	ret := _m.ctrl.Call(_m, "GetMetricsCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsCount indicates an expected call of GetMetricsCount
func (_mr *MockDatabaseMockRecorder) GetMetricsCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMetricsCount")
}

// GetNotifications mocks base method
func (_m *MockDatabase) GetNotifications(_param0 int64) ([]*moira_alert.ScheduledNotification, error) {
	ret := _m.ctrl.Call(_m, "GetNotifications", _param0)
	ret0, _ := ret[0].([]*moira_alert.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications
func (_mr *MockDatabaseMockRecorder) GetNotifications(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNotifications", arg0)
}

// GetSubscription mocks base method
func (_m *MockDatabase) GetSubscription(_param0 string) (moira_alert.SubscriptionData, error) {
	ret := _m.ctrl.Call(_m, "GetSubscription", _param0)
	ret0, _ := ret[0].(moira_alert.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (_mr *MockDatabaseMockRecorder) GetSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscription", arg0)
}

// GetTagsSubscriptions mocks base method
func (_m *MockDatabase) GetTagsSubscriptions(_param0 []string) ([]moira_alert.SubscriptionData, error) {
	ret := _m.ctrl.Call(_m, "GetTagsSubscriptions", _param0)
	ret0, _ := ret[0].([]moira_alert.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsSubscriptions indicates an expected call of GetTagsSubscriptions
func (_mr *MockDatabaseMockRecorder) GetTagsSubscriptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTagsSubscriptions", arg0)
}

// GetTrigger mocks base method
func (_m *MockDatabase) GetTrigger(_param0 string) (moira_alert.TriggerData, error) {
	ret := _m.ctrl.Call(_m, "GetTrigger", _param0)
	ret0, _ := ret[0].(moira_alert.TriggerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger
func (_mr *MockDatabaseMockRecorder) GetTrigger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTrigger", arg0)
}

// GetTriggerEventsCount mocks base method
func (_m *MockDatabase) GetTriggerEventsCount(_param0 string, _param1 int64) int64 {
	ret := _m.ctrl.Call(_m, "GetTriggerEventsCount", _param0, _param1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTriggerEventsCount indicates an expected call of GetTriggerEventsCount
func (_mr *MockDatabaseMockRecorder) GetTriggerEventsCount(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTriggerEventsCount", arg0, arg1)
}

// GetTriggerTags mocks base method
func (_m *MockDatabase) GetTriggerTags(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetTriggerTags", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerTags indicates an expected call of GetTriggerTags
func (_mr *MockDatabaseMockRecorder) GetTriggerTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTriggerTags", arg0)
}

// GetTriggerThrottlingTimestamps mocks base method
func (_m *MockDatabase) GetTriggerThrottlingTimestamps(_param0 string) (time.Time, time.Time) {
	ret := _m.ctrl.Call(_m, "GetTriggerThrottlingTimestamps", _param0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTriggerThrottlingTimestamps indicates an expected call of GetTriggerThrottlingTimestamps
func (_mr *MockDatabaseMockRecorder) GetTriggerThrottlingTimestamps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTriggerThrottlingTimestamps", arg0)
}

// SetContact mocks base method
func (_m *MockDatabase) SetContact(_param0 *moira_alert.ContactData) error {
	ret := _m.ctrl.Call(_m, "SetContact", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContact indicates an expected call of SetContact
func (_mr *MockDatabaseMockRecorder) SetContact(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetContact", arg0)
}

// SetTriggerThrottlingTimestamp mocks base method
func (_m *MockDatabase) SetTriggerThrottlingTimestamp(_param0 string, _param1 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetTriggerThrottlingTimestamp", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerThrottlingTimestamp indicates an expected call of SetTriggerThrottlingTimestamp
func (_mr *MockDatabaseMockRecorder) SetTriggerThrottlingTimestamp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTriggerThrottlingTimestamp", arg0, arg1)
}
