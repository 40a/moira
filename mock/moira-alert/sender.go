// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira-alert (interfaces: Sender)

package mock_moira_alert

import (
	gomock "github.com/golang/mock/gomock"
	moira_alert "github.com/moira-alert/moira-alert"
)

// MockSender is a mock of Sender interface
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSender) EXPECT() *MockSenderMockRecorder {
	return _m.recorder
}

// Init mocks base method
func (_m *MockSender) Init(_param0 map[string]string, _param1 moira_alert.Logger) error {
	ret := _m.ctrl.Call(_m, "Init", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (_mr *MockSenderMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1)
}

// SendEvents mocks base method
func (_m *MockSender) SendEvents(_param0 moira_alert.EventsData, _param1 moira_alert.ContactData, _param2 moira_alert.TriggerData, _param3 bool) error {
	ret := _m.ctrl.Call(_m, "SendEvents", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvents indicates an expected call of SendEvents
func (_mr *MockSenderMockRecorder) SendEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendEvents", arg0, arg1, arg2, arg3)
}
